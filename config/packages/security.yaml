security:

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    password_hashers:
        App\Entity\User: 'auto'

    firewalls:
        # firewall dev (profiler, assets)
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # point d'entrée pour obtenir un JWT
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login
                username_path: email
                password_path: password
                # IMPORTANT : ces handlers renvoient le token ou une 401
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            provider: app_user_provider

        # firewall principal de l'API (protège si une opération l'exige)
        api:
            pattern: ^/api
            stateless: true
            jwt: ~        # Lexik JWT authenticator
            provider: app_user_provider

    access_control:
        # la route de login reste publique
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        # le reste de /api est accessible en lecture (les écritures seront verrouillées dans ApiResource)
        - { path: ^/api, roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
